Node Basics and Fundamentals
	1	What is Node.js?
	2	What is the difference between a framework and a runtime environment?
	3	What is the difference between Node.js and Express.js?
	4	What are the differences between client-side and server-side?

Main Features of Node
	5	What are the seven main features of Node?
	6	What is single-threaded programming?
	7	What is synchronous programming?
	8	What is multi-threaded programming?
	9	What is asynchronous programming?
	10	What is the difference between synchronous and asynchronous programming?
	11	What are events, event emitter, event queue, event loop, and event-driven in Node?
	12	What are the main features and advantages of Node?
	13	What are the disadvantages of Node? When to use or when not to use Node?

Project Setup and Modules
	14	How to set up a Node project?
	15	What is npm? What is the role of the node_modules folder in your project?
	16	What are Node modules?
	17	What is the role of the package.json file in Node?
	18	What are modules in Node? What is the difference between a function and a module?
	19	How many ways are there to export a module?
	20	What will happen if you do not export the module?
	21	How to import single or multiple functions from a module?
	22	What is the module wrapper function?
	23	What are the types of modules in Node?

Top Built-in Modules
	24	What are the top five built-in modules commonly used in Node projects?
	25	Explain the role of the fs module. Name some functions of it.
	26	Explain the role of the path module. Name some functions of it.
	27	Explain the role of the OS module. Name some functions of it.
	28	Explain the role of the events module. How to handle events in Node?
	29	What are event arguments?
	30	What is the difference between a function and an event?
	31	What is the role of the HTTP module in Node?
	32	What is the role of the createServer method of the HTTP module?

Express Framework - Basics
	33	What are the advantages of using Express with Node?
	34	How do you install Express in a Node project?
	35	How to create an HTTP server using Express.js?
	36	How do you create and start the Express application?

Express Framework - Middleware
	37	What is middleware in Express.js and when to use them?
	38	How to implement middleware in Express?
	39	What is the purpose of the app.use function in Express?
	40	What is the purpose of the next parameter in Express.js?
	41	How to use middleware globally for a specific route?
	42	What is the request pipeline in Express?

Express Framework - Types of Middleware
	43	What are the types of middleware in Express.js?
	44	What is the difference between application-level and router-level middleware?
	45	What is error-handling middleware and how to implement it?
	46	If you have five middlewares, then in which middleware will you do the error handling?
	47	What is built-in middleware? How to serve static files from Express.js?
	48	What are third-party middleware? Give some examples.
	49	Can you summarize all the types of middleware?
	50	What are the advantages of using middleware in Express.js?

Express Framework - Routing
	51	What is routing in Express?
	52	What is the difference between middleware and routing in Express?
	53	How to implement routing? How do you define routes in Express?
	54	How to handle routing in Express real applications?
	55	What are route handlers?
	56	What are route parameters in Express?

Express Framework - Additional Routing Questions
	57	What are the router object and router methods, and how to implement them?
	58	What are the types of router methods?
	59	What is the difference between app.get and router.get methods?
	60	What is Express.Router in Express.js?
	61	Share a real application use of routing.
	62	What is route chaining in Express?
	63	What is route nesting in Express?
	64	How to implement route nesting in Express?

Express Framework - Template Engines
	65	What are template engines in Express?
	66	Name some template engine libraries.
	67	How to implement the EJS templating engine in an Express application?

REST API - Basics
	68	What are REST and RESTful API?
	69	What are the HTTP request and HTTP response structure in the UI and REST API?
	70	What are the top five REST guidelines and the advantages of them?
	71	What is the difference between REST API and SOAP API?

REST API - HTTP Methods and Status Codes
	72	What are HTTP verbs and HTTP methods?
	73	What are the GET, POST, PUT, and DELETE HTTP methods?
	74	What is the difference between the PUT and PATCH methods?
	75	Explain the concept of idempotent in RESTful API.
	76	What is the role of status codes in RESTful APIs?

REST API - CORS, Serialization, and Other Topics
	77	What is CORS in RESTful APIs?
	78	How to remove CORS restriction on RESTful API?
	79	What are serialization and deserialization?
	80	What are the types of serialization?
	81	How to serialize and deserialize in Node.js?
	82	Explain the concept of versioning in RESTful APIs.
	83	What is an API document? What are the popular documentation formats?
	84	What is the typical structure of a REST API project in Node?

REST API - Authentication and Authorization
	85	What are authentication and authorization?
	86	What are the types of authentication in Node?
	87	What is basic authentication?
	88	What are the security risks associated with storing passwords as plain text in Node.js?
	89	What is the role of hashing and salt in securing passwords?
	90	How can we create hash passwords in Node.js?
	91	What is API key authentication?
	92	What is token-based authentication and JWT authentication?
	93	What are the parts of the JWT token?
	94	Where does the JWT token reside in the request?

Random Topics - Error Handling and Debugging
	95	What is error handling? In how many ways can you implement error handling in Node applications?
	96	How to handle errors in synchronous operations using try-catch-finally?
	97	What is error-first callbacks?
	98	How to handle errors using promises?
	99	How to handle errors using async/await?
	100	How can you debug a Node.js application?

